syntax = "proto3";

import "google/protobuf/empty.proto";

package vmm;
// Information about a Virtual Machine (VM)
message VmInfo {
  // Unique identifier for the VM
  string id = 1;
  // Name of the VM
  string name = 2;
  // Current status of the VM (e.g., running, stopped)
  string status = 3;
  // Uptime in human-readable format
  string uptime = 4;
  // URL to the guest agent dashboard
  optional string app_url = 5;
  // App ID
  string app_id = 6;
  // Instance ID
  optional string instance_id = 7;
  // Configuration of the VM
  VmConfiguration configuration = 8;
  // Exit time
  optional string exited_at = 9;
  // Boot progress
  string boot_progress = 10;
  // Boot error
  string boot_error = 11;
  // Shutdown progress
  string shutdown_progress = 12;
  // Image version
  string image_version = 13;
}

message Id {
  // Unique identifier for the VM
  string id = 1;
}

message ComposeHash {
  string hash = 1;
}

// Message for creating a VM request
message VmConfiguration {
  // Name of the VM
  string name = 1;
  // Image to be used for the VM
  string image = 2;
  // Compose file to be used for the VM
  string compose_file = 3;
  // Number of vCPUs
  uint32 vcpu = 4;
  // Memory in MB
  uint32 memory = 5;
  // Disk size in GB
  uint32 disk_size = 6;
  // Port mapping
  repeated PortMapping ports = 7;
  // Encrypted environment variables
  bytes encrypted_env = 8;
  // App ID.
  // If not provided, it assumes the app is newly created.
  // If provided, and KMS is enabled, it assumes the app is upgraded from given app_id.
  // If provided, and KMS is disabled, it must equal to the actual app_id computed from compose_file, or the VM will fail to start.
  optional string app_id = 9;
  // User config that would be put at /dstack/.user-config in the CVM.
  string user_config = 10;
  // Hugepages enabled
  bool hugepages = 11;
  // Pin NUMA enabled
  bool pin_numa = 12;
  // Gpu config
  GpuConfig gpus = 13;
  // KMS URLs
  repeated string kms_urls = 14;
  // Gateway URLs
  repeated string gateway_urls = 15;
}

message GpuConfig {
  // GPUs
  repeated GpuSpec gpus = 1;
  // Gpu attach mode
  string attach_mode = 2;
}

message GpuSpec {
  string slot = 1;
}

// Message for port mapping
message PortMapping {
  // Protocol
  string protocol = 1;
  // Host port
  uint32 host_port = 2;
  // VM port
  uint32 vm_port = 3;
  // Host address
  string host_address = 4;
}

// Message for upgrading an app request
message UpgradeAppRequest {
  // ID of the VM
  string id = 1;
  // Compose file to be used for the VM
  string compose_file = 2;
  // Optional update encrypted environment variables. Leave empty to not update.
  bytes encrypted_env = 3;
  // Optional update user config. Leave empty to not update.
  string user_config = 4;
  // Optional update port mapping.
  bool update_ports = 5;
  // Port mapping
  repeated PortMapping ports = 7;
  // gpus
  GpuConfig gpus = 13;
}

// Message for Status request
message StatusRequest {
  // List of VM IDs
  repeated string ids = 1;
  // Brief (Don't include VM configuration)
  bool brief = 2;
  // Filter by keyword
  string keyword = 3;
  // Page number
  uint32 page = 4;
  // Page size
  uint32 page_size = 5;
}

message StatusResponse {
  // List of VMs
  repeated VmInfo vms = 1;
  // Port mapping enabled
  bool port_mapping_enabled = 2;
  // Total number of VMs
  uint32 total = 3;
}

message ImageListResponse {
  repeated ImageInfo images = 1;
}

message ImageInfo {
  string name = 1;
  string description = 2;
  string version = 3;
  bool is_dev = 4;
}

message AppId {
  bytes app_id = 1;
}

message PublicKeyResponse {
  bytes public_key = 1;
  bytes signature = 2;
}

message GetInfoResponse {
  bool found = 1;
  optional VmInfo info = 2;
}

message ResizeVmRequest {
  // Unique identifier for the VM
  string id = 1;
  // Number of vCPUs
  optional uint32 vcpu = 2;
  // Memory in MB
  optional uint32 memory = 3;
  // Disk size in GB
  optional uint32 disk_size = 4;
  // Image name
  optional string image = 5;
}

message KmsSettings {
  string url = 1;
  repeated string urls = 2;
}

message GatewaySettings {
  string url = 1;
  string base_domain = 2;
  uint32 port = 3;
  uint32 agent_port = 4;
  repeated string urls = 5;
}

message ResourcesSettings {
  uint32 max_cvm_number = 1; // equals to the cid pool size.
  uint32 max_allocable_vcpu = 2;
  uint32 max_allocable_memory_in_mb = 3; // in MB.
  uint32 max_disk_size_in_gb = 4; // in GB.
}

message GetMetaResponse {
  KmsSettings kms = 1;
  GatewaySettings gateway = 2;
  ResourcesSettings resources = 3;
}

message VersionResponse {
  string version = 1;
  string rev = 2;
}

message ListGpusResponse {
  repeated GpuInfo gpus = 1;
  bool allow_attach_all = 2;
}

message GpuInfo {
  string slot = 1;
  string product_id = 2;
  string description = 3;
  bool is_free = 4;
}

// Service definition for dstack-vmm
service Vmm {
  // RPC to create a VM
  rpc CreateVm(VmConfiguration) returns (Id);
  // RPC to start a VM
  rpc StartVm(Id) returns (google.protobuf.Empty);
  // RPC to stop a VM
  rpc StopVm(Id) returns (google.protobuf.Empty);
  // RPC to remove a VM
  rpc RemoveVm(Id) returns (google.protobuf.Empty);
  // RPC to upgrade an app
  rpc UpgradeApp(UpgradeAppRequest) returns (Id);
  // Shutdown a VM
  rpc ShutdownVm(Id) returns (google.protobuf.Empty);
  // RPC to resize a VM
  rpc ResizeVm(ResizeVmRequest) returns (google.protobuf.Empty);
  // RPC to compute the compose hash, it's helpful for debugging & developing SDK.
  rpc GetComposeHash(VmConfiguration) returns (ComposeHash);

  // RPC to list all VMs
  rpc Status(StatusRequest) returns (StatusResponse);
  // RPC to list all available images
  rpc ListImages(google.protobuf.Empty) returns (ImageListResponse);

  // Get Env encrypt public key
  rpc GetAppEnvEncryptPubKey(AppId) returns (PublicKeyResponse);

  // Get VM info by ID
  rpc GetInfo(Id) returns (GetInfoResponse);

  // Get version info of the dstack-vmm
  rpc Version(google.protobuf.Empty) returns (VersionResponse);

  // Get version info of the dstack-vmm
  rpc GetMeta(google.protobuf.Empty) returns (GetMetaResponse);

  // List GPUs
  rpc ListGpus(google.protobuf.Empty) returns (ListGpusResponse);
}
